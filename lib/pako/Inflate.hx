package pako;

import haxe.extern.EitherType;

/**
 * Generic JS-style wrapper for zlib calls.
 * 
 * If you don't need streaming behaviour - use more simple functions: `Pako.inflate()` and `Pako.inflateRaw()`.
 * ```
 * var chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 * var chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 * 
 * var inflate = new Inflate({ level: 3 });
 * 
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 * 
 * if (inflate.err) { throw new Error(inflate.err); }
 * 
 * trace(inflate.result);
 * ```
 * @see Documentation: http://nodeca.github.io/pako/#Inflate
 */
#if nodejs @:jsRequire("pako", "Inflate") #else @:native("pako.Inflate") #end
extern class Inflate
{
    /**
     * Creates new inflator instance with specified params.
     * Throws exception on bad params.
     * 
     * By default, when no options set, autodetect deflate/gzip data format via wrapper header.
     * @param options Inflate options.
     * @see Doc: http://nodeca.github.io/pako/#Inflate.new
     */
    public function new(?options:Options);
    
    /**
     * Error code after inflate finished.
     * Value `StatusCode.OK` - on success.
     * Should be checked if broken data possible.
     * 
     * You will not need it in real life, because deflate errors are possible only on wrong
     * options or bad onData / onEnd custom handlers.
     * @see Doc: http://nodeca.github.io/pako/#Inflate.err
     */
    public var err(default, null):StatusCode;

    /**
     * Error message, if `Inflate.err != StatusCode.OK`.
     * @see Doc: http://nodeca.github.io/pako/#Inflate.msg
     */
    public var msg(default, null):String;

    /**
     * Uncompressed result, generated by default `Inflate.onData()` and `Inflate.onEnd()` handlers.
     * Filled after you push last chunk (call `Inflate.push()` with `FlushMode.FINISH` or `true` param) or
     * if you push a chunk with explicit flush (call `Inflate.push()` with `FlushMode.SYNC_FLUSH` param).
     * @see Doc: http://nodeca.github.io/pako/#Inflate.result
     */
    public var result(default, null):Chunk;

    /**
     * By default, stores data blocks in `chunks[]` property and glue those in `onEnd()`.
     * Override this handler, if you need another behaviour.
     * @see Doc: http://nodeca.github.io/pako/#Inflate.prototype.onData
     */
    public var onData:Chunk->Void;

    /**
     * Called either after you tell inflate that the input stream is complete (`FlushMode.FINISH`) or should
     * be flushed (`FlushMode.SYNC_FLUSH`) or if an error happened. By default - join collected chunks, free
     * memory and fill results / err properties.
     * @see Doc: http://nodeca.github.io/pako/#Inflate.prototype.onEnd
     */
    public var onEnd:StatusCode->Void;

    /**
     * Sends input data to inflate pipe, generating Inflate#onData calls with new output chunks.
     * 
     * The last data block must have mode `FlushMode.FINISH` (or `true`). That will flush internal
     * pending buffers and call `Inflate.onEnd()`. For interim explicit flushes (without ending
     * the stream) you can use mode `FlushMode.SYNC_FLUSH`, keeping the decompression context.
     * 
     * On fail call `Inflate.onEnd()` with error code and return false.
     * 
     * We **strongly recommend** to use Uint8Array on input for best speed (output format is detected
     * automatically). Also, don't skip last param and always use the same type in your code (boolean
     * or number). That will improve JS speed.
     * 
     * For regular Array-s make sure all elements are [0..255].
     * 
     * ```
     * push(chunk, false); // push one of data chunk
     * ...
     * push(chunk, true);  // push last chunk
     * ```
     * @param data Input data.
     * @param mode Corresponding flush modes. Skipped or false means `FlushMode.NO_FLUSH`, true means `FlushMode.FINISH`.
     * @return Bool Returns true on success. On fail call `Deflate.onEnd()` with error code and return false.
     * @see Doc: http://nodeca.github.io/pako/#Inflate.prototype.push
     */
    public function push(data:Chunk, mode:EitherType<FlushMode, Bool> = FlushMode.NO_FLUSH):Bool;
}